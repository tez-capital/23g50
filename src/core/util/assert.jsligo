const assert_member = (store: storage_type) => {
	let sender = Tezos.get_sender();
	assert_with_error(Map.mem(sender, store.shares), "not a member")
}

const assert_vote_not_casted = (voteFor: address, store: storage_type) => {
	let sender = Tezos.get_sender();
	assert_with_error(!Big_map.mem([sender, voteFor], store.votes), "existing vote found")
}

const assert_vote_casted = (voteFor: address, store: storage_type) => {
	let sender = Tezos.get_sender();
	assert_with_error(Big_map.mem([sender, voteFor], store.votes), "vote not found")
}

const assert_is_approved = (store: storage_type) => {
	let sender = Tezos.get_sender();
	let requiresApprovals : nat = Map.size(store.shareRates);
	let approvals = Big_map.find_opt(sender, store.depositors);
	match(approvals, {
		Some: (v: nat) => assert_with_error(v > requiresApprovals, "not enough approvals"),
		None: () => failwith("not approved")
	})
}